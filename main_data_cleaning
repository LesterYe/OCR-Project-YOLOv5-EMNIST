{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"main_data_cleaning","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"YWdamWowck4W","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637083226626,"user_tz":-480,"elapsed":452,"user":{"displayName":"Fabian Toh","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi2w9C2qT4xkC_AdOcii8ssQRZBruVlbFA-zCQP=s64","userId":"09209123596383204387"}},"outputId":"244e3359-49e2-4819-cc82-43bf296793af"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","metadata":{"id":"8gOaJfrNaUEA","executionInfo":{"status":"ok","timestamp":1637083229775,"user_tz":-480,"elapsed":1656,"user":{"displayName":"Fabian Toh","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi2w9C2qT4xkC_AdOcii8ssQRZBruVlbFA-zCQP=s64","userId":"09209123596383204387"}}},"source":["# import libraries\n","import pandas as pd\n","import numpy as np\n","from numpy import genfromtxt\n","\n","import skimage\n","import skimage.transform\n","\n","import scipy\n","import time\n","import imageio # To write image, could also use opencv\n","import os\n","import shutil\n","import matplotlib.pyplot as plt\n","import matplotlib.patches as patches\n","from PIL import Image"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"Yqf9-_m2YjHj","executionInfo":{"status":"ok","timestamp":1637083230440,"user_tz":-480,"elapsed":2,"user":{"displayName":"Fabian Toh","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi2w9C2qT4xkC_AdOcii8ssQRZBruVlbFA-zCQP=s64","userId":"09209123596383204387"}}},"source":["dir = \"/content/drive/MyDrive/OCR_Project_SMU/\""],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"NWQrAkrSY5gC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637079244538,"user_tz":-480,"elapsed":712,"user":{"displayName":"Fabian Toh","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi2w9C2qT4xkC_AdOcii8ssQRZBruVlbFA-zCQP=s64","userId":"09209123596383204387"}},"outputId":"3f6a6384-4595-4d0b-ed81-1ad168dd8d71"},"source":["# Create images and annotations folders\n","%mkdir /content/drive/MyDrive/OCR_Project_SMU/images_train/\n","%mkdir /content/drive/MyDrive/OCR_Project_SMU/annotations_train/\n","%mkdir /content/drive/MyDrive/OCR_Project_SMU/images_test/\n","%mkdir /content/drive/MyDrive/OCR_Project_SMU/annotations_test/"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["mkdir: cannot create directory ‘/content/drive/MyDrive/OCR_Project_SMU/images_train/’: No such file or directory\n","mkdir: cannot create directory ‘/content/drive/MyDrive/OCR_Project_SMU/annotations_train/’: No such file or directory\n","mkdir: cannot create directory ‘/content/drive/MyDrive/OCR_Project_SMU/images_test/’: No such file or directory\n","mkdir: cannot create directory ‘/content/drive/MyDrive/OCR_Project_SMU/annotations_test/’: No such file or directory\n"]}]},{"cell_type":"code","metadata":{"id":"PsSvAmnfaURW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637083242666,"user_tz":-480,"elapsed":10520,"user":{"displayName":"Fabian Toh","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi2w9C2qT4xkC_AdOcii8ssQRZBruVlbFA-zCQP=s64","userId":"09209123596383204387"}},"outputId":"7d5a4665-e54e-4bc3-eccc-117c76d0da88"},"source":["im_train= dir + 'images_train/'\n","annotations_train= dir+ 'annotations_train/'\n","data_path_train= dir + 'DATA/emnist-balanced-train.csv'\n","\n","im_test= dir + 'images_test/'\n","annotations_test= dir + 'annotations_test/'\n","data_path_test= dir + 'DATA/emnist-balanced-test.csv'\n","\n","# First column has label, using mappings to get associated class\n","df_train = pd.read_csv(data_path_train)\n","df_test = pd.read_csv(data_path_test)\n","print(df_train.shape)\n","print(df_test.shape)\n","\n","# num_subj=df.shape[0] # Number of subjects to sample from\n","im_size=(320,320) # Size of image to generate\n","num_gen=10000 # Number of images to generate\n","debug=False\n"],"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["(112799, 785)\n","(18799, 785)\n"]}]},{"cell_type":"code","metadata":{"id":"v3qb3Arcotf3","executionInfo":{"status":"ok","timestamp":1637083242667,"user_tz":-480,"elapsed":19,"user":{"displayName":"Fabian Toh","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi2w9C2qT4xkC_AdOcii8ssQRZBruVlbFA-zCQP=s64","userId":"09209123596383204387"}}},"source":["shear_fn=lambda: np.random.random_integers(-5, 5)"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ttofb9mwaUUs","executionInfo":{"status":"ok","timestamp":1637083242669,"user_tz":-480,"elapsed":18,"user":{"displayName":"Fabian Toh","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi2w9C2qT4xkC_AdOcii8ssQRZBruVlbFA-zCQP=s64","userId":"09209123596383204387"}}},"source":["# set class mapping\n","class_mapping = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabdefghnqrt'"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LKh5Kbw2Z4KB","executionInfo":{"status":"ok","timestamp":1637083242670,"user_tz":-480,"elapsed":17,"user":{"displayName":"Fabian Toh","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi2w9C2qT4xkC_AdOcii8ssQRZBruVlbFA-zCQP=s64","userId":"09209123596383204387"}},"outputId":"bb6be2fd-6d7c-43ba-e970-7cb34ca96784"},"source":["excluded_class = ['0', '1', '9', 'F', 'I', 'L', 'O', 'S', 'Z', 'a', 'd', 'e', 'f', 'g', 'q', 't']\n","excluded_class_index = []  # 0, 1, 9, F, I, L, O, S, Z, a, d, e, f, g, q, t\n","for i in range(len(class_mapping)):\n","  if class_mapping[i] in excluded_class:\n","    excluded_class_index.append(i)\n","\n","print(excluded_class_index)"],"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["[0, 1, 9, 15, 18, 21, 24, 28, 35, 36, 38, 39, 40, 41, 44, 46]\n"]}]},{"cell_type":"code","metadata":{"id":"Y5S7YGVzd2I2","executionInfo":{"status":"ok","timestamp":1637083245573,"user_tz":-480,"elapsed":584,"user":{"displayName":"Fabian Toh","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi2w9C2qT4xkC_AdOcii8ssQRZBruVlbFA-zCQP=s64","userId":"09209123596383204387"}}},"source":["# helper functions\n","def shear_augmentation(sample):\n","  tf = skimage.transform.AffineTransform(shear=np.deg2rad(shear_fn()))\n","  sample = skimage.transform.warp(sample, tf, order=1, preserve_range=True)    \n","  return sample\n","\n","def scale(sample, img_class, min_percent=0.08, max_percent=0.12):\n","  scale_x = (np.random.rand()*max_percent)+min_percent\n","  if img_class in excluded_class_index: \n","    scale_y = scale_x\n","  else:\n","    scale_y = (np.random.rand()*max_percent)+min_percent\n","  scale_sample = np.array(Image.fromarray(sample.astype(np.uint8)).resize((int(scale_y*np.min(im_size)),int(scale_x*np.min(im_size)))))\n","  plt.imshow(scale_sample); plt.show()\n","  return scale_sample"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"AR-39TLkiO7u","executionInfo":{"status":"ok","timestamp":1637083248531,"user_tz":-480,"elapsed":648,"user":{"displayName":"Fabian Toh","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi2w9C2qT4xkC_AdOcii8ssQRZBruVlbFA-zCQP=s64","userId":"09209123596383204387"}},"outputId":"d0740570-c190-4a65-fc98-7704a4316bc0"},"source":["num_rows = df_train.shape[0]\n","arr = np.random.choice(num_rows, num_rows, replace=False)\n","print(arr)\n","\n","idx = arr[3]\n","stream=df_train.iloc[idx,1:].to_numpy() # Return a Numpy representation of the DataFrame\n","sample_class = df_train.iloc[idx,0]\n","sample=np.reshape(stream,(28,28), order=\"F\")\n","plt.imshow(sample); plt.show()\n","print(class_mapping[sample_class])"],"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["[31187 38535 29300 ... 40064 47393 24687]\n"]},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["T\n"]}]},{"cell_type":"code","metadata":{"id":"-m3rHCLeaUbd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637078698932,"user_tz":-480,"elapsed":2989,"user":{"displayName":"Mardy Marn","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04351534484218931304"}},"outputId":"fec8d0a5-70bb-41a5-b1b1-996180f009d7"},"source":["sample = shear_augmentation(sample)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: DeprecationWarning: This function is deprecated. Please call randint(-5, 5 + 1) instead\n","  \"\"\"Entry point for launching an IPython kernel.\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":286},"id":"rl4mEHj6qFw6","executionInfo":{"status":"ok","timestamp":1637083728931,"user_tz":-480,"elapsed":505,"user":{"displayName":"Fabian Toh","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi2w9C2qT4xkC_AdOcii8ssQRZBruVlbFA-zCQP=s64","userId":"09209123596383204387"}},"outputId":"791cec1f-9e70-44a2-c34f-75a9024d5ecb"},"source":["# Testing for square scaling\n","im_size = (320,320)\n","im=np.zeros((im_size[0],im_size[1],3))\n","test = df_train.iloc[10000,1:].to_numpy()\n","test = np.reshape(test,(28,28), order=\"F\")\n","temp = scale(test, df_train.iloc[10000,0])\n","print(temp.shape)"],"execution_count":13,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["(60, 60)\n"]}]},{"cell_type":"code","metadata":{"id":"0vQ_MrjgaUhd","colab":{"base_uri":"https://localhost:8080/","height":285},"executionInfo":{"status":"ok","timestamp":1637083732688,"user_tz":-480,"elapsed":674,"user":{"displayName":"Fabian Toh","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi2w9C2qT4xkC_AdOcii8ssQRZBruVlbFA-zCQP=s64","userId":"09209123596383204387"}},"outputId":"5bd6ed24-60c1-4b26-ba08-a8c89c358347"},"source":["# testing for random scaling\n","im=np.zeros((im_size[0],im_size[1],3))\n","temp = scale(sample, sample_class)\n","print(temp.shape)"],"execution_count":14,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["(47, 61)\n"]}]},{"cell_type":"code","metadata":{"id":"FPog0CQQaUk2","colab":{"base_uri":"https://localhost:8080/","height":304},"executionInfo":{"status":"ok","timestamp":1637083873512,"user_tz":-480,"elapsed":693,"user":{"displayName":"Fabian Toh","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi2w9C2qT4xkC_AdOcii8ssQRZBruVlbFA-zCQP=s64","userId":"09209123596383204387"}},"outputId":"c33ae618-6512-4947-d0ed-4316f0bd2096"},"source":["# plotting full picture\n","im[0:temp.shape[0],0:temp.shape[1],0] = temp\n","plt.imshow(im)"],"execution_count":15,"outputs":[{"output_type":"stream","name":"stderr","text":["Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"]},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7fb2a47ff750>"]},"metadata":{},"execution_count":15},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"ruO5hAYZaUni"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"l6tMZd4aaUq1"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"no6sMbMvaUt_"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wrDduTzuaUw_"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Dp6ERcJBaU2L"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"PpnWaNuuaU48"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4eYlowMaaU75"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"R78xNuxCaU-u"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"84mUKMhiaVBA"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CuZ0Yyy_aVEC"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"tAcQBKiTaVGt"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0-ngoMvUaVJl"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-gQByE2AaVMp"},"source":["num_rows = df.shape[0]\n","arr = np.random.choice(num_rows, num_rows, replace=False)\n","count = 0\n","\n","for i in range(num_gen):\n","    if (i%50)==0:\n","        print(i)\n","    t1=time.time()\n","    im=np.zeros((im_size[0],im_size[1],3)); # Initialize image\n","    check_mask=np.zeros((im_size[0],im_size[1])) # Initialize binary mask to keep track of where images have been placed\n","    annotation=[];    \n","    annotation2=[];\n","    \n","    num_char=np.random.randint(low=20,high=50); # Randomly sample number of chars to place on image\n","    for j in range(num_char):\n","        idx = arr[count]\n","        stream=df.iloc[idx,1:].to_numpy() # Return a Numpy representation of the DataFrame\n","\n","        # img_class = df.iloc[idx, 0]\n","\n","        sample=np.reshape(stream,(28,28), order=\"F\");\n","        plt.imshow(sample); plt.show()\n","\n","        # Randomly sample shear augmentation\n","        sample = shear_augmentation(sample)\n","\n","        # Randomly sample scale of digit --> from 8% to 20% of full image size\n","        scale_y=(np.random.rand()*0.12)+0.08\n","        scale_x=(np.random.rand()*0.12)+0.08\n","        # sample=scipy.misc.imresize(sample,(int(scale_y*im_size[0]),int(scale_x*im_size[1])))\n","        sample = np.array(Image.fromarray(sample).resize((int(scale_y*im_size[0]),int(scale_x*im_size[1]))))\n","        print(sample.shape)\n","        plt.imshow(sample); plt.show()\n","\n","        # Randomly sample placement onto full image\n","        place_x=np.random.randint(low=0,high=im_size[1]-sample.shape[1]-1)\n","        place_y=np.random.randint(low=0,high=im_size[0]-sample.shape[0]-1)\n","\n","        # Only place image if we aren't overlapping any already existing images\n","        if np.sum(check_mask[place_y:place_y+sample.shape[0],place_x:place_x+sample.shape[1]])<1:\n","            im[place_y:place_y+sample.shape[0],place_x:place_x+sample.shape[1],0]=sample\n","            # im[place_y:place_y+sample.shape[0],place_x:place_x+sample.shape[1],1]=sample\n","            # im[place_y:place_y+sample.shape[0],place_x:place_x+sample.shape[1],2]=sample\n","            check_mask[place_y:place_y+sample.shape[0],place_x:place_x+sample.shape[1]]=1\n","            x1=place_x # Left border\n","            x2=place_x+sample.shape[1] # Right border\n","            y1=place_y # Top border\n","            y2=place_y+sample.shape[0] # Bottom border\n","            if debug:\n","                print('IMAGE PLACED')\n","            annotation2.append((str(label), str(x1/im_size[1]), str(x2/im_size[1]), str(y1/im_size[0]), str(y2/im_size[0])))\n","            annotation.append((label, x1, x2, y1, y2)) # Annotation to be passed to the xml generator\n","        \n","        # Counter\n","        count +=1\n","    \n","    im=im.astype(np.uint8)        \n","    # Get file IDs\n","    ct=len(os.listdir(im_top))\n","    ID = str(ct)\n","    while len(ID)<6:\n","        ID='0'+ID\n","\n","    imageio.imwrite(im_top+ID+'.jpg',im) # Write image\n","\n","    # Write simple version of annotations\n","    with open(annotations_top + ID + '.csv','w') as file:\n","        for j in range(len(annotation2)):\n","            for k in range(len(annotation2[j])):\n","                file.write(annotation2[j][k])\n","                file.write(',')\n","            file.write('\\n')"],"execution_count":null,"outputs":[]}]}